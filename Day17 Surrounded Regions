class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if not board:
            return

        m, n = len(board), len(board[0])
        if m<=2 or n<= 2:
            return board
        
        temp = set()
        def dfs(i, j):
            if i<0 or i>=m or j<0 or j>=n:
                return
            
            if board[i][j] == 'O':
                if (i,j) in temp:
                    return
                else:
                    temp.add((i,j))
                    dfs(i+1, j)
                    dfs(i-1, j)
                    dfs(i, j+1)
                    dfs(i, j-1)
            # else:
            #     return
 
        for i in range(m):
            if board[i][0] == 'O':
                dfs(i, 0)
            if board[i][n-1] == 'O':
                dfs(i, n-1)
        for j in range(n):
            if board[0][j] == 'O':
                dfs(0, j)
            if board[m-1][j] == 'O':
                dfs(m-1, j)
            
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'O' and (i,j) not in temp:
                    board[i][j] = 'X'

